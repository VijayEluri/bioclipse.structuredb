# For the general syntax of property based configuration files see the
# documentation of org.apache.log4j.PropertyConfigurator at:
# http://logging.apache.org/log4j/1.2/apidocs/org/apache/log4j/PropertyConfigurator.html

# Sets up the appender that writes to a file (and names the appender "file")

# Note the substitution in the filename. Unfortunately, you can't use
# ${osgi.instance.area}/bioclipse.log or the like because that property's value
# is a URL, and the filename is just passed naively to the java.io.FileOutputStream
# constructor (which does not understand file: URLs).
# However, it should be possible to use a system property that you define in code.

# Note also that the Bioclipse startup code expects there to be an appender
# named "file", and looks up its File attribute in order to display the log
# file name. If you rename this appender Bioclipse will display a warning to the
# effect that file logging may not be set up.

log4j.appender.file=org.apache.log4j.FileAppender
log4j.appender.file.File=${bioclipse.defaultLogDir}/bioclipse.log
log4j.appender.file.BufferedIO=false
log4j.appender.file.layout=org.apache.log4j.PatternLayout
#log4j.appender.file.layout.ConversionPattern=%p %t %c - %m%n
log4j.appender.file.layout.ConversionPattern=%d{ABSOLUTE} %5p %c{1}:%L - %m%n

# Sets up the appender that writes to the console (and names the appender "stdout")

log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.Target=System.out
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%d{ABSOLUTE} %5p %c{1}:%L - %m%n

# Sets up log4j to log output at DEBUG level and above, except that Spring-DM's
# DEBUG level logging is (appropriately) verbose, so set it to give only INFO
# level logging

log4j.rootCategory=DEBUG, file, stdout
log4j.logger.org.springframework=INFO