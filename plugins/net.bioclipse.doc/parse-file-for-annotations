#!perl -w
use strict;

use Data::Dumper;

my $current_indentation = 0;
sub say_indent {
    my $text = join '', @_, '';

    print ' ' x (4 * $current_indentation), $text, "\n";
}

sub do_indented {
    my ($code) = @_;

    ++$current_indentation;
    $code->();
    --$current_indentation;
}

say_indent('---');

my $interface;
my @classes;
my @namespaces;
my $description;
my %methods;

while (my $line = <>) {

    chomp $line;

    if ( $line =~ / \s interface \s+ (\w+) /x ) {

        $interface = $1;
        my @class_files = `grep -Rl "implements $interface" ..`;

        @classes = grep { $_ }
                   map { m[/(\w+)\.java$] && $1 }
                   @class_files;

        for my $class_file (@class_files) {
            push @namespaces,
                 grep { $_ }
                 map { m[return "([^"]*)"] && $1 }
                 `grep -A2 'public String getNamespace' $class_file`
        }
    }

    if ( $line =~ / \@PublishedClass /x ) {
        $line .= <> while $line !~ /\)\s*$/;

        $description = $line;
        for ($description) {
            s{ ^ \s* \@PublishedClass \s* \( \s* }{}x;
            s{ ^ value \s* = \s* }{}x;
            s{ " \s* \+ \s* " }{}xg;
            s{ \) \s* }{}x;
            s{ ^ \s* " }{}x;
            s{ " \s* $ }{}x;
        }
    }

    if ( $line =~ / \@PublishedMethod /x ) {
        $line .= <> while $line !~ /\)\s*$/;

        my $method_desc = $line;
        for ($method_desc) {
            s{ ^ \s* \@PublishedMethod \s* \( \s* }{}x;
            s{ " \s* \+ \s* " }{}xg;
            s{ \) \s* }{}x;
        }

        my %method_desc = ();
        if ( $method_desc =~ m{ params \s* = \s* " ([^"]*) " }x ) {
            $method_desc{params} = $1;
        }
        if ( $method_desc =~ m{ methodSummary \s* = \s* " ([^"]*) " }x ) {
            $method_desc{summary} = $1;
        }

        $_ = <>;
        $_ = <> while m{^\s*$}                    # empty lines
                   or m{^\s*\@\w+\s*$}            # other annotations...
                   or m{^\s*\@\w+\(} .. m{\)\s*$} # ...sometimes multi-line
                   or m{^\s*public\s+\S+\s*$};    # 'public' + return type
        my $method_signature = $_;

        die 'Your format is silly: ', $method_signature
          if $method_signature !~ m{\(};

        if ( $method_signature =~ m{ \s (\w+) \s* \( }x ) {
            $methods{$1} = \%method_desc;
        }
        else {
            die 'Found no name to hang the method on: ', $method_signature;
        }
    }

    if ( $line =~ /^}\s*$/ && defined $interface && defined $description ) {
        say_indent( $interface, ':' );
        do_indented sub {
            say_indent( 'Classes: ' );
            do_indented sub {
                say_indent( '- ', $_ ) for @classes;
            };
            say_indent( 'Namespaces: ' );
            do_indented sub {
                say_indent( '- ', $_ ) for @namespaces;
            };
            say_indent( 'Description: ', $description );
            say_indent( 'Methods:' );

            do_indented sub {
                for my $name ( sort keys %methods ) {
                    say_indent( '- ',  $name, ':' );

                    do_indented sub {   
                        for my $prop ( reverse sort keys %{$methods{$name}} ) {
                            say_indent( '- ', $prop,
                                        ': ', $methods{$name}{$prop} );
                        }
                    };
                }
            };
        };
        say_indent();

        undef $interface;
        undef $description;
        undef %methods;
        undef @classes;
        undef @namespaces;
    }
}

#say_indent('...');
