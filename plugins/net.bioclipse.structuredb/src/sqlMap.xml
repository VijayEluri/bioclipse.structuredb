<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE sqlMap PUBLIC "-//iBatis.com//iBatis.com//DTD SQL Map 2.0//EN" "http://www.ibatis.com/dtd/sql-map-2.dtd">
<!--+
    | Copyright (c) 2007 Bioclipse Project
    | All rights reserved. This program and the accompanying materials
    | are made available under the terms of the Eclipse Public License v1.0
    | which accompanies this distribution, and is available at
    | http://www.eclipse.org/legal/epl-v10.html
    +-->
<sqlMap>

<!--+
    | PARAMATER MAPS
    +-->
    <parameterMap class="Structure" id="Structure.insert">
        <parameter property="id"                                     />     
        <parameter property="name"                                   />
        <parameter property="id"                                     />    
        <parameter property="label.id"                              />        
        <parameter property="smiles"                                 />   
        <parameter property="persistedFingerprint" jdbcType="binary" />     
        <parameter property="moleculeCML"                            /> 
    </parameterMap>

    <parameterMap class="Structure" id="Structure.insertWithoutLabel">
        <parameter property="id"                                     />     
        <parameter property="name"                                   />
        <parameter property="id"                                     />    
        <parameter property="smiles"                                 />   
        <parameter property="persistedFingerprint" jdbcType="binary" />     
        <parameter property="moleculeCML"                            /> 
    </parameterMap>

    <parameterMap class="Structure" id="Structure.update">
        <parameter property="label.id"                              />     
        <parameter property="smiles"                                 />
        <parameter property="persistedFingerprint" jdbcType="binary" />
        <parameter property="moleculeCML"                            />
        <parameter property="name"                                   />    
    </parameterMap>
    
    <parameterMap class="Structure" id="Structure.updateWithoutLabel">
        <parameter property="smiles"      />
        <parameter property="persistedFingerprint" jdbcType="binary" />
        <parameter property="moleculeCML" />
        <parameter property="name"        />
    </parameterMap>
    
<!--+
    | RESULT MAPS
    +-->
	<resultMap class="BaseObject" id="BaseObject">
		<result property="id"         column="id"                               />
		<result property="created"    column="created"                          />
		<result property="edited"     column="edited"                           />
		<result property="creator"    column="creator"    select="User.getById" />
		<result property="lastEditor" column="lastEditor" select="User.getById" />
	</resultMap>

	<resultMap class="Label" id="Label" extends="BaseObject">
		<result property="structures" column="id" select="Label.getStructures" />
		<result property="name"       column="name"                             />
	</resultMap>
	
	<resultMap class="Structure" id="Structure" extends="BaseObject">
		<result property="label"               column="label" select="Label.getById" />
		<result property="persistedFingerprint" column="persistedFingerprint" jdbcType="binary" />
		<result property="smiles"               column="smiles"                         />
		<result property="moleculeCML"          column="molecule"                       />
		<result property="name"                 column="name"                           />
	</resultMap>

	<resultMap class="Structure" id="Structure-without-label" extends="BaseObject">
		<result property="persistedFingerprint" column="persistedFingerprint" jdbcType="binary" />
		<result property="smiles"               column="smiles"               />
		<result property="moleculeCML"          column="molecule"             />
		<result property="name"                 column="name"                 />
	</resultMap>
	
	<resultMap class="User" id="User" extends="BaseObject">
		<result property="userName"      column="userName" />
		<result property="passWordMd5"   column="passWord" />
		<result property="sudoer"        column="sudoer"   />
	</resultMap>

<!--+
    | SQL FRAGMENTS
    +-->
	<sql id="BaseObject-fields">
		b.id         AS id,
		b.created    AS created,
		b.edited     AS edited,
		b.creator    AS creator,
		b.lastEditor AS lastEditor	
	</sql>
	
	<sql id="Structure-fields">
		s.label           AS label,
		<include refid="Structure-fields-without-label" />
	</sql>
	
	<sql id="Structure-fields-without-label">
		s.persistedFingerprint AS persistedFingerprint,
		s.smiles               AS smiles,
		s.molecule             AS molecule,
		s.name                 AS name	
	</sql>
	
	<sql id="User-fields">
		u.userName AS userName,
		u.passWord AS passWord,
		u.sudoer   AS sudoer
	</sql>
	
	<sql id="Label-fields">
	   l.name AS name
	</sql>
	
<!--+
    | INSERT STATEMENTS
    +-->
	<insert  id="BaseObject.insert">
		INSERT INTO BaseObject (  id,     created,     edited,     creator,        lastEditor )
			            VALUES ('$id$', '$created$', '$edited$', '$creator.id$', '$lastEditor.id$')
	</insert>
	
	<insert id="BaseObject.insertWithoutAuditInfo">
        INSERT INTO BaseObject (  id   )
                        VALUES ('$id$' )
    </insert>
	
	<insert id="User.insert">
		INSERT INTO User (   id,     userName,     passWord,        sudoer,     baseObject )
			      VALUES ( '$id$', '$userName$', '$passWordMd5$', '$sudoer$', '$id$'       );
	</insert>
	
	<insert id="Structure.insert" parameterMap="Structure.insert">
		INSERT INTO Structure (  id,   name, baseObject, label,      smiles,   persistedFingerprint,   molecule     )
		               VALUES ( ?, ?, ?, ?, ?, ?, ? ); 
	</insert>
	
	<insert id="Structure.insertWithoutLabel" parameterMap="Structure.insertWithoutLabel">
		INSERT INTO Structure (  id,   name,   baseObject, smiles,   persistedFingerprint,   molecule      )
		               VALUES ( ?, ?, ?, ?, ?, ? );
	</insert>
	
	<insert id="Label.insert">
		INSERT INTO Label (   id,     baseObject, name   )
		             VALUES ( '$id$', '$id$',     '$name$' );
	</insert>
	
<!--+
    | SELECT STATEMENTS
    +-->

    <select id="Structure.numberOf" parameterClass="java.util.Map" resultClass="int">
        SELECT 
            count(*) as numberOf 
        FROM
            Structure
    </select>
    
	<select id="Structure.getById" parameterClass="String" resultMap="Structure">
		SELECT 
			<include refid="BaseObject-fields" />, 
			<include refid="Structure-fields"  />
		FROM
			Structure s INNER JOIN BaseObject b ON
			s.baseObject = b.id
		WHERE 
			s.id = #value#
	</select>
	
	<select id="User.getById" parameterClass="String" resultMap="User">
		SELECT 
			<include refid="BaseObject-fields" />,
			<include refid="User-fields"       />
		FROM
			User u INNER JOIN BaseObject b ON
			u.baseObject = b.id
		WHERE 
			u.id = #value#
	</select>
	
	<select id="User.getByUsername" parameterClass="String" resultMap="User">
        SELECT 
            <include refid="BaseObject-fields" />,
            <include refid="User-fields"       />
        FROM
            User u INNER JOIN BaseObject b ON
            u.baseObject = b.id
        WHERE 
            u.username = #value#
    </select>
	
	<select id="Label.getById" resultMap="Label" parameterClass="String">
		SELECT 
			<include refid="BaseObject-fields" />,
			<include refid="Label-fields"    />
		FROM
			Label l INNER JOIN BaseObject b ON
			l.baseObject = b.id
		WHERE 
			l.id = #value#
	</select>
	
	<select id="Label.getByName" resultMap="Label" parameterClass="String">
        SELECT 
            <include refid="BaseObject-fields" />,
            <include refid="Label-fields"    />
        FROM
            Label l INNER JOIN BaseObject b ON
            l.baseObject = b.id
        WHERE 
            l.name = #value#
    </select>
	
	<select id="Label.getStructures" resultMap="Structure-without-label" parameterClass="String">
		SELECT 
			<include refid="BaseObject-fields" />,
			<include refid="Structure-fields-without-label"  />
		FROM
			Structure s INNER JOIN BaseObject b ON
			s.baseObject = b.id
		WHERE 
			s.label = #value#
	</select>
	
	<select id="Structure.getAll" resultMap="Structure">
		SELECT
			<include refid="BaseObject-fields" />, 
			<include refid="Structure-fields"  />
		FROM
			Structure s INNER JOIN BaseObject b ON
			s.baseObject = b.id
	</select>
	
	<select id="Structure.getByName" resultMap="Structure" parameterClass="String">
        SELECT
            <include refid="BaseObject-fields" />, 
            <include refid="Structure-fields"  />
        FROM
            Structure s INNER JOIN BaseObject b ON
            s.baseObject = b.id
        WHERE
            s.name = #value#
    </select>
	
	<select id="Label.getAll" resultMap="Label">
		SELECT
			<include refid="BaseObject-fields" />,
			<include refid="Label-fields"     />
		FROM
			Label l INNER JOIN BaseObject b ON
			l.baseObject = b.id
	</select>

	<select id="User.getAll" resultMap="User">
		SELECT 
			<include refid="BaseObject-fields" />,
			<include refid="User-fields"       />
		FROM
			User u INNER JOIN BaseObject b ON
			u.baseObject = b.id
	</select>
	
	<select id="Structure.fingerPrintSubsetSearch" 
	        resultMap="Structure"
	        parameterClass="java.util.Map">
        SELECT
            <include refid="BaseObject-fields" />, 
            <include refid="Structure-fields"  />
        FROM
            Structure s INNER JOIN BaseObject b ON
            s.baseObject = b.id
        WHERE
            BITAND(s.persistedFingerprint, #param:BINARY#) = #param:BINARY# 
    </select>
    
    <select id="Structure.numberOfFingerprintSubstructureMatches"
            parameterClass="java.util.Map" 
            resultClass="int" >
        SELECT 
            count(*) as numberOf 
        FROM
            Structure s
        WHERE 
            BITAND(s.persistedFingerprint, #param:BINARY#) = #param:BINARY#
    </select>
	
<!--+
    | DELETE STATEMENTS
    +-->	
	<delete id="BaseObject.delete" parameterClass="String">
		DELETE FROM BaseObject
		WHERE id='$value$';
	</delete>
<!--+
    | UPDATE STATEMENTS
    +-->
    <update id="BaseObject.update" parameterClass="BaseObject">
    	UPDATE 
    		BaseObject
    	SET 
			created    = '$created$',
			edited     = '$edited$',
			creator    = '$creator.id$',
			lastEditor = '$lastEditor.id$'	
		WHERE
			id = '$id$'
    </update>
    
    <update id="User.update" parameterClass="User">
    	UPDATE 
    		User
    	SET 
	    	userName = '$userName$',
			passWord = '$passWordMd5$',
			sudoer   = '$sudoer$'
		WHERE
			id = '$id$'
    </update>
    
    <update id="Label.update" parameterClass="Label">
        UPDATE
            Label
        SET
            name = '$name$'
        WHERE
            id = '$id$'    	
    </update>
    
    <update id="Structure.update" parameterMap="Structure.update">
    	UPDATE 
    		Structure
    	SET 
	    	label               = ?,
	    	smiles               = ?,
	    	persistedFingerprint = ?,
	    	molecule             = ?,
	    	name                 = ?
		WHERE
			id = '$id$'
    </update>
    
    <update id="Structure-without-label.update" parameterMap="Structure.updateWithoutLabel">
    	UPDATE 
    		Structure
    	SET 
	    	smiles               = ?,
	    	persistedFingerprint = ?,
	    	molecule             = ?,
	    	name                 = ?
		WHERE
			id = '$id$'
    </update>
    
    <update id="Structure.setLabel" parameterClass="java.util.Map">
        UPDATE
            Structure
        SET
            label = '$labelId$'
        WHERE
            id = '$structureId$'
    </update>
</sqlMap>